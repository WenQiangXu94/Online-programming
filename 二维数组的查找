在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

/**
*先对行遍历，再根据target是否在当前列来对列进行遍历。
*/
public class Solution {
    public boolean Find(int target, int [][] array) {
        if(array.length == 0 || array[0].length == 0){ return false; } 
        for(int i = 0;i < array.length;i ++)
        { 
            if(target >= array[i][0] && target <= array[i][array[i].length - 1])
            { 
                for(int j = 0; j < array[i].length; j ++)
                { 
                    if(target == array[i][j])
                    { return true; 
                    } 
                } 
            } 
        } 
        return false;

    }
}

/**
*从右上角元素开始查找，当前元素大于target时，其对应的列可以排除，所以列数col减一；当前元素小于target时，其对应的行可以排除，所以列数row加一。
*关键点在于，从右上角开始查找，排除某行某列时，其对应的某些区域已经提前被排除了。
*/

public class Solution {
    public boolean Find(int target, int [][] array) {
       if((array==null||array.length==0)||(array.length==1&&array[0].length==0)){ //judge if the array is null
            return false;
        }
        
        int row = 0;
        int col = array.length-1;
        
        while(row<=array.length-1 && col >= 0)
        {
            if(array[row][col] == target)
                return true;
            else if(array[row][col] > target)
                col--;
            else
                row++;
        }
        return false;
    }
}
       
/**
*循环遍历每一行，在每一行中进行二分查找
*/
public class Solution {
    public boolean Find(int target, int [][] array) {
        if(array.length == 0 || array[0].length == 0){ return false; } 
        for(int i = 0; i < array.length; i++)
        {
            int low = 0;
            int high = array[i].length - 1; 
            int mid;
            
            while(low <= high)
            {
                mid = (low + high) / 2;
                if(array[i][mid] == target)
                    return true;
                else if(array[i][mid] > target)
                    high = mid - 1;
                else
                    low = mid + 1;
            }
        }
      return false;
    }
}
